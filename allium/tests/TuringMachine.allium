type Symbol {
    ctor A;
    ctor B;
    ctor C;
    ctor MarkA;
    ctor MarkB;
    ctor MarkC;
}

type HalfTape {
    ctor Nil;
    ctor Cons(Symbol, HalfTape);
}

type State {
    ctor MarkA;
    ctor MarkB;
    ctor MarkC;
    ctor ScanLeft;
    ctor Check;
}

// Simulates a turing machine which accepts strings of the form (A^n)(B^n)(C^n).
//
// State - starting state of the TM
// Symbol - the symbol under the reader head of the TM
// HalfTape - the symbols to the left of the read head, in "reverse" order
// HalfTape - the symbols to the right of the reader head, in "forward" order
pred simulate(State, Symbol, HalfTape, HalfTape) {
    simulate(MarkA, A, let l, Cons(let next, let r)) <- simulate(MarkB, next, Cons(MarkA, l), r);
    simulate(MarkB, A, let l, Cons(let next, let r)) <- simulate(MarkB, next, Cons(A, l), r);
    simulate(MarkB, MarkB, let l, Cons(let next, let r)) <- simulate(MarkB, next, Cons(MarkB, l), r);
    simulate(MarkB, B, let l, Cons(let next, let r)) <- simulate(MarkC, next, Cons(MarkB, l), r);
    simulate(MarkC, B, let l, Cons(let next, let r)) <- simulate(MarkC, next, Cons(B, l), r);
    simulate(MarkC, MarkC, let l, Cons(let next, let r)) <- simulate(MarkC, next, Cons(MarkC, l), r);
    simulate(MarkC, C, Cons(let next, let l), Nil) <- simulate(Check, next, l, Cons(MarkC, Nil));
    simulate(MarkC, C, Cons(let next, let l), let r) <- simulate(ScanLeft, next, l, Cons(MarkC, r));

    simulate(Check, MarkA, _, _) <- true;
    simulate(Check, MarkB, Cons(let next, let l), let r) <- simulate(Check, next, l, Cons(MarkB, r));
    simulate(Check, MarkC, Cons(let next, let l), let r) <- simulate(Check, next, l, Cons(MarkC, r));
    simulate(Check, let s, Cons(let next, let l), let r) <- simulate(ScanLeft, next, l, Cons(s, r));

    simulate(ScanLeft, MarkA, let l, Cons(let next, let r)) <- simulate(MarkA, next, Cons(MarkA, l), r);
    simulate(ScanLeft, let s, Cons(let next, let l), let r) <- simulate(ScanLeft, next, l, Cons(s, r));
}

pred main {
    main <- simulate(MarkA, A, Nil, Cons(A, Cons(B, Cons(B, Cons(C, Cons(C, Nil))))));
}

// CHECK: prove: main()
// CHECK: prove: simulate(0(), 0(), 0(), 1(0(), 1(1(), 1(1(), 1(2(), 1(2(), 0(), ), ), ), ), ), )
// CHECK: prove: simulate(1(), var 1, 1(3(), var 0, ), var 2, )
// CHECK: prove: simulate(1(), var 1, 1(0(), var 0, ), var 2, )
// CHECK: prove: simulate(2(), var 1, 1(4(), var 0, ), var 2, )
// CHECK: prove: simulate(2(), var 1, 1(1(), var 0, ), var 2, )
// CHECK: prove: simulate(3(), var 0, var 1, 1(5(), var 2, ), )
// CHECK: prove: simulate(3(), var 1, var 2, 1(var 0, var 3, ), )
// CHECK: prove: simulate(3(), var 1, var 2, 1(var 0, var 3, ), )
// CHECK: prove: simulate(3(), var 1, var 2, 1(var 0, var 3, ), )
// CHECK: prove: simulate(0(), var 1, 1(3(), var 0, ), var 2, )
// CHECK: prove: simulate(1(), var 1, 1(3(), var 0, ), var 2, )
// CHECK: prove: simulate(1(), var 1, 1(4(), var 0, ), var 2, )
// CHECK: prove: simulate(2(), var 1, 1(4(), var 0, ), var 2, )
// CHECK: prove: simulate(2(), var 1, 1(5(), var 0, ), var 2, )
// CHECK: prove: simulate(4(), var 0, var 1, 1(5(), 0(), ), )
// CHECK: prove: simulate(4(), var 0, var 1, 1(5(), var 2, ), )
// CHECK: prove: simulate(4(), var 0, var 1, 1(4(), var 2, ), )
// CHECK: prove: simulate(4(), var 0, var 1, 1(4(), var 2, ), )
// CHECK: Exit code: 0
