type Symbol {
    ctor A;
    ctor B;
}

type Input {
    ctor Nil;
    ctor Cons(Symbol, Input);
}

type StackSymbol {
    ctor I;
}

type Stack {
    ctor Nil;
    ctor Push(StackSymbol, Stack);
}

type State {
    ctor ReadA;
    ctor ReadB;
}

// Accepts iff the given Input matches (A^n)(B^n)
pred simulate(State, Stack, Input) {
    simulate(ReadB, Nil, Nil) <- true;
    simulate(ReadA, let stack, Cons(A, let tail)) <- simulate(ReadA, Push(I, stack), tail);
    simulate(ReadA, Push(I, let stack), Cons(B, let tail)) <- simulate(ReadB, stack, tail);
    simulate(ReadB, Push(I, let stack), Cons(B, let tail)) <- simulate(ReadB, stack, tail);
}

pred main {
    main <- simulate(ReadA, Nil, Cons(A, Cons(A, Cons(B, Cons(B, Nil)))));
}
